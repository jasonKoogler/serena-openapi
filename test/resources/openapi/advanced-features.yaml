openapi: 3.0.3
info:
  title: Advanced OpenAPI Features API
  description: API demonstrating OpenAPI 3.x features like callbacks, webhooks, and advanced security
  version: 2.0.0
  contact:
    name: API Support
    url: https://example.com/support
    email: api-support@example.com

servers:
  - url: https://api.advanced.com/v2
    description: Production server

paths:
  /subscriptions:
    post:
      operationId: createSubscription
      summary: Create webhook subscription
      description: Subscribe to receive webhook notifications for specific events
      tags:
        - subscriptions
        - webhooks
      security:
        - ApiKeyAuth: []
        - OAuth2: [write:subscriptions]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubscriptionRequest'
      responses:
        '201':
          description: Subscription created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Subscription'
        '400':
          description: Invalid subscription request
        '401':
          description: Unauthorized
      callbacks:
        eventNotification:
          '{$request.body#/callbackUrl}':
            post:
              summary: Event notification callback
              description: Webhook callback sent when subscribed events occur
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/EventNotification'
              responses:
                '200':
                  description: Callback received successfully
                '400':
                  description: Invalid callback payload
        statusUpdate:
          '{$request.body#/statusUrl}':
            post:
              summary: Status update callback
              description: Webhook callback for subscription status changes
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/StatusUpdate'
              responses:
                '200':
                  description: Status update received

  /orders:
    post:
      operationId: createOrder
      summary: Create new order
      description: Create a new order with payment processing callbacks
      tags:
        - orders
        - payments
      security:
        - ApiKeyAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderRequest'
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '400':
          description: Invalid order data
      callbacks:
        paymentCallback:
          '{$request.body#/paymentCallbackUrl}':
            post:
              summary: Payment status callback
              description: Called by payment processor with payment status updates
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/PaymentCallback'
              responses:
                '200':
                  description: Payment callback processed
                '400':
                  description: Invalid payment data
        shippingCallback:
          '{$request.body#/shippingCallbackUrl}':
            post:
              summary: Shipping status callback
              description: Called when shipping status changes
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/ShippingCallback'
              responses:
                '200':
                  description: Shipping callback processed

  /orders/{orderId}:
    get:
      operationId: getOrder
      summary: Get order details
      description: Retrieve order information including status and tracking
      tags:
        - orders
      security:
        - ApiKeyAuth: []
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Order details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'
        '404':
          description: Order not found

  /users/{userId}/notifications:
    get:
      operationId: getUserNotifications
      summary: Get user notifications
      description: Retrieve notification history for a specific user
      tags:
        - users
        - notifications
      security:
        - OAuth2: [read:notifications]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
      responses:
        '200':
          description: User notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Notification'

# OpenAPI 3.1 Webhooks (if supported)
webhooks:
  userCreated:
    post:
      operationId: userCreatedWebhook
      summary: User created webhook
      description: Triggered when a new user is created in the system
      tags:
        - webhooks
        - users
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreatedEvent'
      responses:
        '200':
          description: Webhook received successfully
        '400':
          description: Invalid webhook payload

  orderStatusChanged:
    post:
      operationId: orderStatusChangedWebhook
      summary: Order status changed webhook
      description: Triggered when an order status changes
      tags:
        - webhooks
        - orders
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OrderStatusEvent'
      responses:
        '200':
          description: Webhook received successfully

  paymentCompleted:
    post:
      operationId: paymentCompletedWebhook
      summary: Payment completed webhook
      description: Triggered when a payment is successfully completed
      tags:
        - webhooks
        - payments
        - events
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PaymentCompletedEvent'
      responses:
        '200':
          description: Payment webhook processed
        '400':
          description: Invalid payment webhook data

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication. Obtain from your dashboard.
    
    OAuth2:
      type: oauth2
      description: OAuth2 authentication with various scopes
      flows:
        authorizationCode:
          authorizationUrl: https://auth.advanced.com/oauth/authorize
          tokenUrl: https://auth.advanced.com/oauth/token
          scopes:
            read:notifications: Read user notifications
            write:subscriptions: Create and manage webhook subscriptions
            read:orders: Read order information
            write:orders: Create and modify orders
        clientCredentials:
          tokenUrl: https://auth.advanced.com/oauth/token
          scopes:
            admin:webhooks: Manage webhook configurations
            admin:users: Manage user accounts

    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT bearer token for API access

  schemas:
    SubscriptionRequest:
      type: object
      required:
        - eventType
        - callbackUrl
      properties:
        eventType:
          type: string
          enum: [user.created, order.status_changed, payment.completed]
          description: Type of event to subscribe to
        callbackUrl:
          type: string
          format: uri
          description: URL where webhook notifications will be sent
        statusUrl:
          type: string
          format: uri
          description: Optional URL for subscription status updates
        secret:
          type: string
          description: Secret for webhook signature verification

    Subscription:
      type: object
      properties:
        id:
          type: string
          format: uuid
        eventType:
          type: string
        callbackUrl:
          type: string
          format: uri
        status:
          type: string
          enum: [active, paused, failed]
        createdAt:
          type: string
          format: date-time
        lastTriggered:
          type: string
          format: date-time

    EventNotification:
      type: object
      required:
        - eventId
        - eventType
        - timestamp
        - data
      properties:
        eventId:
          type: string
          format: uuid
        eventType:
          type: string
        timestamp:
          type: string
          format: date-time
        data:
          type: object
          description: Event-specific data payload
        signature:
          type: string
          description: HMAC signature for verification

    StatusUpdate:
      type: object
      properties:
        subscriptionId:
          type: string
          format: uuid
        status:
          type: string
          enum: [active, paused, failed, cancelled]
        reason:
          type: string
        timestamp:
          type: string
          format: date-time

    OrderRequest:
      type: object
      required:
        - items
        - paymentCallbackUrl
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        customerId:
          type: string
        paymentCallbackUrl:
          type: string
          format: uri
        shippingCallbackUrl:
          type: string
          format: uri

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        status:
          type: string
          enum: [pending, processing, shipped, delivered, cancelled]
        items:
          type: array
          items:
            $ref: '#/components/schemas/OrderItem'
        total:
          type: number
          format: decimal
        createdAt:
          type: string
          format: date-time

    OrderItem:
      type: object
      properties:
        productId:
          type: string
        quantity:
          type: integer
          minimum: 1
        price:
          type: number
          format: decimal

    PaymentCallback:
      type: object
      required:
        - orderId
        - status
        - transactionId
      properties:
        orderId:
          type: string
          format: uuid
        status:
          type: string
          enum: [success, failed, pending, cancelled]
        transactionId:
          type: string
        amount:
          type: number
          format: decimal
        currency:
          type: string
        timestamp:
          type: string
          format: date-time

    ShippingCallback:
      type: object
      properties:
        orderId:
          type: string
          format: uuid
        status:
          type: string
          enum: [preparing, shipped, in_transit, delivered]
        trackingNumber:
          type: string
        carrier:
          type: string
        estimatedDelivery:
          type: string
          format: date-time

    Notification:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
        title:
          type: string
        message:
          type: string
        read:
          type: boolean
        createdAt:
          type: string
          format: date-time

    # Webhook event schemas
    UserCreatedEvent:
      type: object
      required:
        - eventId
        - eventType
        - timestamp
        - user
      properties:
        eventId:
          type: string
          format: uuid
        eventType:
          type: string
          enum: [user.created]
        timestamp:
          type: string
          format: date-time
        user:
          type: object
          properties:
            id:
              type: string
            email:
              type: string
              format: email
            name:
              type: string
            createdAt:
              type: string
              format: date-time

    OrderStatusEvent:
      type: object
      required:
        - eventId
        - eventType
        - timestamp
        - order
      properties:
        eventId:
          type: string
          format: uuid
        eventType:
          type: string
          enum: [order.status_changed]
        timestamp:
          type: string
          format: date-time
        order:
          $ref: '#/components/schemas/Order'
        previousStatus:
          type: string

    PaymentCompletedEvent:
      type: object
      required:
        - eventId
        - eventType
        - timestamp
        - payment
      properties:
        eventId:
          type: string
          format: uuid
        eventType:
          type: string
          enum: [payment.completed]
        timestamp:
          type: string
          format: date-time
        payment:
          type: object
          properties:
            orderId:
              type: string
              format: uuid
            amount:
              type: number
              format: decimal
            currency:
              type: string
            paymentMethod:
              type: string
            transactionId:
              type: string